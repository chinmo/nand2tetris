// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decode
    And(a=instruction[15], b=instruction[15], out=Cop);
    And(a=instruction[15], b=instruction[12], out=aBit);
    And(a=instruction[15], b=instruction[11], out=c1);
    And(a=instruction[15], b=instruction[10], out=c2);
    And(a=instruction[15], b=instruction[9], out=c3);
    And(a=instruction[15], b=instruction[8], out=c4);
    And(a=instruction[15], b=instruction[7], out=c5);
    And(a=instruction[15], b=instruction[6], out=c6);
    And(a=instruction[15], b=instruction[5], out=d1); // A
    And(a=instruction[15], b=instruction[4], out=d2); // D
    And(a=instruction[15], b=instruction[3], out=d3); // Memory[A]
    And(a=instruction[15], b=instruction[2], out=j1);
    And(a=instruction[15], b=instruction[1], out=j2);
    And(a=instruction[15], b=instruction[0], out=j3);
    DMux8Way(in=true, sel[0]=j3, sel[1]=j2, sel[2]=j1,
            a=noJmp,
            b=JGT,
            c=JEQ,
            d=JGE,
            e=JLT,
            f=JNE,
            g=JLE,
            h=Jmp);

    // D
    DRegister(in=outALU, load=d2, out=Dout);

    // A 命令
    Mux16(a=instruction, b=outALU, sel=d1, out=Ain);
    Not(in=Cop, out=Aop);
    Or(a=Aop, b=d1, out=Aload);
    ARegister(in=Ain, load=Aload, out=Aout, out[0..14]=addressM);
    Mux16(a=Aout, b=inM, sel=aBit, out=AMout);

    // C
    ALU(x=Dout, // D
        y=AMout, // A/M
        zx=c1,
        nx=c2,
        zy=c3,
        ny=c4,
        f=c5,
        no=c6,
        out=outM, out=outALU,
        zr=outZ,
        ng=outN);

    // Jump
    Not(in=outZ, out=outNZ);
    Not(in=outN, out=outPorZ);
    Or(a=outN, b=outZ, out=outNorZ);
    And(a=outNZ, b=outPorZ, out=outP);

    And(a=JGT, b=outP, out=doJGT);
    And(a=JEQ, b=outZ, out=doJEQ);
    And(a=JGE, b=outPorZ, out=doJGE);
    And(a=JLT, b=outN, out=doJLT);
    And(a=JNE, b=outNZ, out=doJNE);
    And(a=JLE, b=outNorZ, out=doJLE);

    Or8Way( in[0]=false, // No Jump
            in[1]=doJGT,
            in[2]=doJEQ,
            in[3]=doJGE,
            in[4]=doJLT,
            in[5]=doJNE,
            in[6]=doJLE,
            in[7]=Jmp,
            out=doJmp);

    // PC
    And(a=Cop, b=doJmp, out=doLoad);
    Not(in=doLoad, out=doInc);
    PC(in=Aout, load=doLoad, inc=doInc, reset=reset, out[0..14]=pc);

    // WriteM
    And(a=Cop, b=d3, out=writeM);
}